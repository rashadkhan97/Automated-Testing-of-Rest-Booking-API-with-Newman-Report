{
	"info": {
		"_postman_id": "0ba9190f-a7dc-44dd-9562-4b2d7bd5cca0",
		"name": "Rashadul_Islam_SQA_API_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28551494"
	},
	"item": [
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//copying all data from response body\r",
							"var jsonData =pm.response.json();\r",
							"\r",
							"//Setting auto generated id and will add on enviroment\r",
							"pm.environment.set(\"id\", jsonData.bookingid);\r",
							"\r",
							"//Test case writing starts from here for create booking\r",
							"\r",
							"//status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//response time <300 checking\r",
							"pm.test(\"respnse time is less then 300\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//DYNAMIC CREATION LIST FOR ALL VARIABLES\r",
							"//First Name\r",
							"\r",
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set(\"firstname\", firstname)\r",
							"\r",
							"//Last Name\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
							"pm.environment.set(\"lastname\", lastname); //calling enivorment to get lastname in enviroment\r",
							"\r",
							"\r",
							"//totalprice\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"pm.environment.set(\"totalprice\", totalprice)\r",
							"\r",
							"//depositpaid\r",
							"var depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
							"pm.environment.set(\"depositpaid\", depositpaid)\r",
							"\r",
							"//calling moment library for Checkin & Check out\r",
							"const moment = require(\"moment\");       \r",
							"// moment is a library for date and time\r",
							"const today = moment();\r",
							"//for checking\r",
							"pm.environment.set(\"checkin\", today.add(0,'d').format(\"YYYY-MM-DD\"));\r",
							"pm.environment.set(\"checkout\", today.add(5, 'd').format(\"YYYY-MM-DD\"));\r",
							"\r",
							"//additional needs \r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomProduct}}\");\r",
							"pm.environment.set(\"additionalneeds\", additionalneeds)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n\t\"lastname\" : \"{{lastname}}\",\r\n\t\"totalprice\" : \"{{totalprice}}\",\r\n\t\"depositpaid\" : {{depositpaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/booking/",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//creating a variable for checking response code\r",
							"var responseCode = pm.response.code\r",
							"\r",
							"console.log(responseCode)\r",
							"\r",
							"if(responseCode==200){\r",
							"\r",
							"    // main work starts here \r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    //status code is 200 check\r",
							"    pm.test('Status code is 200', function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"\r",
							"    //response time is < 300\r",
							"    pm.test('respnse time is less then 300', function () {\r",
							"        pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"    })\r",
							"\r",
							"    //main test start here\r",
							"    pm.test('First Name Validation', function () {\r",
							"        pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"firstname\"));\r",
							"    })\r",
							"\r",
							"    pm.test('Last Name Validation', function () {\r",
							"        pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"lastname\"));\r",
							"    })\r",
							"\r",
							"    //toString() used since totalprice is randomInt\r",
							"    pm.test(\"Total Price Validation\", function () {\r",
							"        pm.expect(jsonData.totalprice.toString()).to.eql(pm.environment.get(\"totalprice\"));\r",
							"    });\r",
							"\r",
							"    //toString() used since depostipaid is randomboolean\r",
							"    pm.test(\"Deposit Paid Validation\", function(){\r",
							"        pm.expect(jsonData.depositpaid.toString()).to.eql(pm.environment.get(\"depositpaid\"))\r",
							"    })\r",
							"\r",
							"} else if(responseCode=400){\r",
							"    pm.test(\"Bad Request\")\r",
							"\r",
							"} else if(responseCode=403){\r",
							"    pm.test(\"Forbidden\")\r",
							"\r",
							"} else if(responseCode=404){\r",
							"    pm.test(\"Not Found\")\r",
							"\r",
							"} else if(responseCode=405){\r",
							"    pm.test(\"Bad Gateway\")\r",
							"\r",
							"} else if(responseCode=500){\r",
							"    pm.test(\"Server Error\")\r",
							"\r",
							"} else if(responseCode=502){\r",
							"    pm.test(\"Bad Gateway\")\r",
							"\r",
							"} else{\r",
							"    pm.test(\"Something went wrong. Please check it again\")\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/booking/{{id}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//copying all data from response body\r",
							"var jsonData =pm.response.json();\r",
							"\r",
							"//seting token into enviroment automatic\r",
							"pm.environment.set(\"token\", jsonData.token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/auth",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//DYNAMIC CREATION LIST FOR ALL VARIABLES\r",
							"//First Name\r",
							"\r",
							"var updated_firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set(\"updated_firstname\", updated_firstname)\r",
							"\r",
							"//Last Name\r",
							"var updated_lastname = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
							"pm.environment.set(\"updated_lastname\", updated_lastname); //calling enivorment to get lastname in enviroment\r",
							"\r",
							"\r",
							"//totalprice\r",
							"var updated_totalprice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"pm.environment.set(\"updated_totalprice\", updated_totalprice)\r",
							"\r",
							"//depositpaid\r",
							"var updated_depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
							"pm.environment.set(\"updated_depositpaid\", updated_depositpaid)\r",
							"\r",
							"//calling moment library for Checkin & Check out\r",
							"const moment = require(\"moment\");       \r",
							"// moment is a library for date and time\r",
							"const today = moment();\r",
							"//for checking\r",
							"pm.environment.set(\"updated_checkin\", today.add(1,'d').format(\"YYYY-MM-DD\"));\r",
							"pm.environment.set(\"updated_checkout\", today.add(5, 'd').format(\"YYYY-MM-DD\"));\r",
							"\r",
							"//additional needs \r",
							"var updated_additionalneeds = pm.variables.replaceIn(\"{{$randomProduct}}\");\r",
							"pm.environment.set(\"updated_additionalneeds\", updated_additionalneeds)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//copying all data from response body\r",
							"var jsonData =pm.response.json();\r",
							"\r",
							"//Setting auto generated id and will add on enviroment\r",
							"//pm.environment.set(\"id\", jsonData.bookingid);\r",
							"\r",
							"//Test case writing starts from here for create booking\r",
							"\r",
							"//status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//response time <300 checking\r",
							"pm.test(\"respnse time is less then 300\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{updated_firstname}}\",\r\n\t\"lastname\" : \"{{updated_lastname}}\",\r\n\t\"totalprice\" : \"{{updated_totalprice}}\",\r\n\t\"depositpaid\" : {{updated_depositpaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{updated_checkin}}\",\r\n    \t\"checkout\" : \"{{updated_checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{updated_additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/booking/{{id}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking After Updated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//creating a variable for checking response code",
							"var responseCode = pm.response.code",
							"",
							"console.log(responseCode)",
							"",
							"if(responseCode==200){",
							"",
							"    // main work starts here ",
							"    var jsonData = pm.response.json();",
							"",
							"    //status code is 200 check",
							"    pm.test('Status code is 200', function () {",
							"        pm.response.to.have.status(200);",
							"    })",
							"",
							"    //response time is < 300",
							"    pm.test('respnse time is less then 300', function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(300);",
							"    })",
							"",
							"    //main test start here",
							"    pm.test('First Name Validation', function () {",
							"        pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"updated_firstname\"));",
							"    })",
							"",
							"    pm.test('Last Name Validation', function () {",
							"        pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"updated_lastname\"));",
							"    })",
							"",
							"    //toString() used since totalprice is randomInt",
							"    pm.test(\"Total Price Validation\", function () {",
							"        pm.expect(jsonData.totalprice.toString()).to.eql(pm.environment.get(\"updated_totalprice\"));",
							"    });",
							"",
							"    //toString() used since depostipaid is randomboolean",
							"    pm.test(\"Deposit Paid Validation\", function(){",
							"        pm.expect(jsonData.depositpaid.toString()).to.eql(pm.environment.get(\"updated_depositpaid\"))",
							"    })",
							"",
							"} else if(responseCode=400){",
							"    pm.test(\"Bad Request\")",
							"",
							"} else if(responseCode=403){",
							"    pm.test(\"Forbidden\")",
							"",
							"} else if(responseCode=404){",
							"    pm.test(\"Not Found\")",
							"",
							"} else if(responseCode=405){",
							"    pm.test(\"Bad Gateway\")",
							"",
							"} else if(responseCode=500){",
							"    pm.test(\"Server Error\")",
							"",
							"} else if(responseCode=502){",
							"    pm.test(\"Bad Gateway\")",
							"",
							"} else{",
							"    pm.test(\"Something went wrong. Please check it again\")",
							"}",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/booking/{{id}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BASE_URL}}/booking/{{id}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking After Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//response time is < 300\r",
							" pm.test('respnse time is less then 300', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"})\r",
							"\r",
							"// varify status code is 404\r",
							"pm.test(\"varify status code is 404 Not Found\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/booking/{{id}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}